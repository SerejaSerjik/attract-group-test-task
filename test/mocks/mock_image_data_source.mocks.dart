// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_image_gallery/test/mocks/mock_image_data_source.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter_image_gallery/core/error/failures.dart' as _i5;
import 'package:flutter_image_gallery/features/gallery/data/datasources/image_data_source.dart'
    as _i3;
import 'package:flutter_image_gallery/features/gallery/domain/entities/image_entity.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ImageDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageDataSource extends _i1.Mock implements _i3.ImageDataSource {
  MockImageDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.ImageEntity>>> fetchImages({
    int? page = 1,
    int? limit = 30,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchImages,
          [],
          {
            #page: page,
            #limit: limit,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.ImageEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.ImageEntity>>(
          this,
          Invocation.method(
            #fetchImages,
            [],
            {
              #page: page,
              #limit: limit,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.ImageEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> cacheImage(
          _i6.ImageEntity? image) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheImage,
          [image],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #cacheImage,
            [image],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ImageEntity?>> getCachedImage(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedImage,
          [id],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.ImageEntity?>>.value(
                _FakeEither_0<_i5.Failure, _i6.ImageEntity?>(
          this,
          Invocation.method(
            #getCachedImage,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.ImageEntity?>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> isImageCached(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #isImageCached,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #isImageCached,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.ImageEntity>>> getCachedImages({
    int? offset = 0,
    int? limit = 30,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedImages,
          [],
          {
            #offset: offset,
            #limit: limit,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.ImageEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.ImageEntity>>(
          this,
          Invocation.method(
            #getCachedImages,
            [],
            {
              #offset: offset,
              #limit: limit,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.ImageEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> getCacheSize() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCacheSize,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
            _FakeEither_0<_i5.Failure, int>(
          this,
          Invocation.method(
            #getCacheSize,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, int>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> clearCacheToLimit(
          int? maxSizeBytes) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearCacheToLimit,
          [maxSizeBytes],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #clearCacheToLimit,
            [maxSizeBytes],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}
