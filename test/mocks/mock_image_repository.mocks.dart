// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_image_gallery/test/mocks/mock_image_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter_image_gallery/core/error/failures.dart' as _i6;
import 'package:flutter_image_gallery/features/gallery/data/datasources/cache_manager_service.dart'
    as _i2;
import 'package:flutter_image_gallery/features/gallery/domain/entities/image_entity.dart'
    as _i7;
import 'package:flutter_image_gallery/features/gallery/domain/repositories/image_repository.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCacheManagerService_0 extends _i1.SmartFake
    implements _i2.CacheManagerService {
  _FakeCacheManagerService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ImageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageRepository extends _i1.Mock implements _i4.ImageRepository {
  MockImageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CacheManagerService get cacheManagerService => (super.noSuchMethod(
        Invocation.getter(#cacheManagerService),
        returnValue: _FakeCacheManagerService_0(
          this,
          Invocation.getter(#cacheManagerService),
        ),
      ) as _i2.CacheManagerService);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.ImageEntity>>> getImages({
    int? page = 1,
    int? limit = 30,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getImages,
          [],
          {
            #page: page,
            #limit: limit,
          },
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.ImageEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.ImageEntity>>(
          this,
          Invocation.method(
            #getImages,
            [],
            {
              #page: page,
              #limit: limit,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.ImageEntity>>>);

  @override
  _i5.Future<
      _i3.Either<_i6.Failure, List<_i7.ImageEntity>>> getInfiniteScrollImages({
    int? page = 1,
    int? limit = 30,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInfiniteScrollImages,
          [],
          {
            #page: page,
            #limit: limit,
          },
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.ImageEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.ImageEntity>>(
          this,
          Invocation.method(
            #getInfiniteScrollImages,
            [],
            {
              #page: page,
              #limit: limit,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.ImageEntity>>>);

  @override
  _i5.Future<
      _i3.Either<_i6.Failure, List<_i7.ImageEntity>>> getPaginatedImages({
    int? page = 1,
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPaginatedImages,
          [],
          {
            #page: page,
            #limit: limit,
          },
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.ImageEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.ImageEntity>>(
          this,
          Invocation.method(
            #getPaginatedImages,
            [],
            {
              #page: page,
              #limit: limit,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.ImageEntity>>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>> cacheImage(
          _i7.ImageEntity? image) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheImage,
          [image],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i6.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #cacheImage,
            [image],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.ImageEntity?>> getCachedImage(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedImage,
          [id],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i7.ImageEntity?>>.value(
                _FakeEither_1<_i6.Failure, _i7.ImageEntity?>(
          this,
          Invocation.method(
            #getCachedImage,
            [id],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.ImageEntity?>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> isImageCached(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #isImageCached,
          [id],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #isImageCached,
            [id],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.ImageEntity>>> getCachedImages({
    int? offset = 0,
    int? limit = 30,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedImages,
          [],
          {
            #offset: offset,
            #limit: limit,
          },
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.ImageEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.ImageEntity>>(
          this,
          Invocation.method(
            #getCachedImages,
            [],
            {
              #offset: offset,
              #limit: limit,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.ImageEntity>>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, int>> getCacheSize() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCacheSize,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, int>>.value(
            _FakeEither_1<_i6.Failure, int>(
          this,
          Invocation.method(
            #getCacheSize,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, int>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>> clearCacheToLimit(
          int? maxSizeBytes) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearCacheToLimit,
          [maxSizeBytes],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i6.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #clearCacheToLimit,
            [maxSizeBytes],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>> initializeCache() =>
      (super.noSuchMethod(
        Invocation.method(
          #initializeCache,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i6.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #initializeCache,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i3.Unit>>);
}
